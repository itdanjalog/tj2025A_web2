
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // [1] 스프링 웹
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // [2] 롬복
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // [3] mysql jdbc
    runtimeOnly 'com.mysql:mysql-connector-j'
    // [4] websocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    // [5] JSOUP
    implementation 'org.jsoup:jsoup:1.21.2'
    // [6] 셀레니움
    implementation 'org.seleniumhq.selenium:selenium-java:4.35.0'
    // [7] 셀레니움 브라우저 매니저 (크롬)
    implementation 'io.github.bonigarcia:webdrivermanager:6.3.1'
    // [8] 마이바티스
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.5'
    // [9] AOP 관점지향 프로그래밍
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    // [10] noSQL REDIS
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // [11] 비크립트( 암호화 )
    implementation 'org.springframework.security:spring-security-crypto:6.4.4'
    // 6. J(자바)JWT 라이브러리
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    implementation 'org.springframework.boot:spring-boot-starter-security'

    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'


}

tasks.named('test') {
    useJUnitPlatform()
}


//// ====================================================================
//// ✅ React (프론트엔드) 자동 빌드 연동 (Windows 호환)
//// ====================================================================
//def frontendDir = "${projectDir}/src/main/reactapp"
//
//// React 빌드 전 npm 설치
//task installReact(type: Exec) {
//    workingDir frontendDir
//    commandLine "cmd", "/c", "npm install"
//}
//
//// React 빌드
//task buildReact(type: Exec) {
//    dependsOn installReact
//    workingDir frontendDir
//    commandLine "cmd", "/c", "npm run build"
//}
//
//// 빌드된 React 결과물을 Spring 정적 리소스로 복사
//task copyReactBuild(type: Copy) {
//    dependsOn buildReact
//    from("${frontendDir}/dist")   // ✅ Vite 기준 (CRA는 build)
//    into("${projectDir}/src/main/resources/static")
//}
//
//// Spring Boot 빌드 시 자동으로 React 복사 포함
//processResources.dependsOn(copyReactBuild)

