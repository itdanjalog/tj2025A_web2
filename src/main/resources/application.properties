# .properties 파일의 주석하는 방법

# [1] 스프링 서버 port 설정
server.port = 8080

# [2] JDBC 연동 설정 , DAO 에서 했던 연동 코드 대신에
# 1. 연동할 db서버 의 주소
spring.datasource.url=jdbc:mysql://localhost:3306/springweb2
# 2. 연동할 db서버 의 계정명
spring.datasource.username=root
# 3. 연동할 db서버 의 패스워드  , 주의할점 앞뒤 띄어쓰기 주의
spring.datasource.password=1234

########### [3] logging ###########
# 이 섹션은 Spring Boot 애플리케이션에서 "로그" 관련 설정을 관리하는 부분입니다.
# 로그란 프로그램이 실행되면서 남기는 기록(메시지)으로,
# 실행 흐름, 오류 원인, 상태 등을 추적할 수 있게 도와줍니다.

# ----------------------------------------------------------
# 1. logging.file.name : 로그 파일 저장 위치/이름 설정
# ----------------------------------------------------------
# logs/app.log → 프로젝트 실행 위치 기준으로 logs 폴더 안에 app.log 파일이 생성됩니다.
# 로그는 콘솔(터미널)과 파일 두 군데에 동시에 출력할 수 있습니다.
logging.file.name=logs/app.log


# ----------------------------------------------------------
# 2 & 3. 로그 출력 패턴 (console / file 공통)
# ----------------------------------------------------------
# %d{yyyy-MM-dd HH:mm:ss} : 로그가 찍힌 날짜와 시간
# %-5level                : 로그 레벨 (DEBUG, INFO, WARN, ERROR) - 5자리 고정 출력
# %logger{36}             : 로그를 남긴 클래스 이름 (최대 36자까지 표시)
# %msg                    : 로그 메시지 (실제 기록할 내용)
# %n                      : 줄바꿈(new line)
#
# ※ 차이점
# - logging.pattern.console → 콘솔(터미널)에 출력되는 로그 형식
# - logging.pattern.file    → 파일(app.log)에 저장되는 로그 형식
#
# 출력 예시 (파일 로그 기준) →
# [2025-09-25 23:41:49] INFO  example.day10.BookController - 도서 대출 요청
logging.pattern.console=[%d{yyyy-MM-dd HH:mm:ss}] %-5level %logger{36} - %msg%n
logging.pattern.file=[%d{yyyy-MM-dd HH:mm:ss}] %-5level %logger{36} - %msg%n


# ----------------------------------------------------------
# 4. 기본(root) 로그 레벨과 불필요한 프레임워크 로그 줄이기
# ----------------------------------------------------------
# spring.main.log-startup-info=false
#   → 스프링 부트 실행 시 자동으로 찍히는 "Starting App..." 같은 시작 로그를 끕니다.
#
# logging.level.org.springframework.boot.web=warn
# logging.level.org.springframework.boot.web.embedded.tomcat=warn
# logging.level.org.apache.catalina=warn
# logging.level.org.apache.coyote=warn
# logging.level.org.springframework.web=warn
#   → 스프링/톰캣 같은 프레임워크 내부 로그는 너무 많이 나오므로, "warn 이상"만 출력되게 합니다.
#     (즉, INFO 로그는 보이지 않고, WARN/ERROR 로그만 남깁니다.)
spring.main.log-startup-info=false
logging.level.org.springframework.boot.web=warn
logging.level.org.springframework.boot.web.embedded.tomcat=warn
logging.level.org.apache.catalina=warn
logging.level.org.apache.coyote=warn
logging.level.org.springframework.web=warn


# ----------------------------------------------------------
# 5. 내가 만든 코드(example.day10)만 별도로 DEBUG 레벨까지 보기
# ----------------------------------------------------------
# logging.level.example.day10=debug
#   → 내가 작성한 코드(example.day10 패키지)는 DEBUG 로그까지 모두 출력합니다.
#   → 이렇게 하면, 프레임워크 로그는 줄이고, 내 코드 실행 흐름은 상세히 추적할 수 있습니다.
logging.level.example.day10=debug

# 전체 root 는 WARN (즉, WARN/ERROR 만 출력)
logging.level.root=WARN

#   DEBUG < INFO < WARN < ERROR  < OFF
#DEBUG : 개발 시 필요한 디버깅 정보. 실행 흐름을 상세히 보고 싶을 때 사용.
#INFO : 서비스 실행 흐름을 알 수 있는 정보. (정상 동작 알림: 시작, 완료 등)
#WARN : 잠재적인 문제 상황 (경고). 에러는 아니지만 주의가 필요한 경우.
#ERROR : 오류 상황. 기능이 실패했거나 예외 발생 시 기록.

#OFF : 로그 출력 완전히 끔.