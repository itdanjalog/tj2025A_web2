[ 트랜잭션 ]
    1. 정의 : 데이터베이스에서 여러 연산(명령어)을 하나의 논리적인 작업 단위

    2. 목적/특징 : 데이터의 신뢰성과 안정성 확보
        1. 데이터 무결성 보장 : 여러 연산 중 하나라도 실패하면 전체를 실패 처리한다.
        2. 원자성(Atomicity) 보장 : 여러 연산이 모두 성공해야만 결과를 반영한다.
        3. 일관성(Consistency) 유지 : 트랜잭션 전후 데이터는 항상 일관된 상태여야 한다.
        4. 독립성/격리성(Isolation) : 동시에 실행되는 다른 트랜잭션에 영향을 받지 않는다.
        5. 지속성(Durability) : 트랜잭션이 성공적으로 완료되면 결과는 영구적으로 저장된다.

    3. 용어
        1. Transaction : 트랜잭션 자체
        2. commit : 트랜잭션이 정상 완료되어 최종 반영
        3. rollback : 트랜잭션 중 오류 발생 시 이전 상태로 되돌림
        4. savepoint : 특정 시점까지의 작업을 임시저장하여 부분 롤백 가능

    4. 사용처 (예시)
        예시1] 은행이체 : 유재석이 강호동에게 100만원 이체 → 출금과 입금을 하나의 트랜잭션으로 처리해야 한다.
            - 유재석 계좌에서 100만원 출금
            - 강호동 계좌에 100만원 입금
            - 중간에 오류 발생 시 출금도, 입금도 모두 취소되어야 함 (rollback)

        예시2] 주문처리 : 주문은 주문 정보 등록, 주문 상세 등록, 재고 차감이 모두 하나의 트랜잭션 단위
            - 주문 테이블 insert
            - 주문 상세 테이블 insert
            - 재고 차감 update
            - 중간에 오류 발생 시 전체 작업 rollback → 데이터 무결성 보장

    5. 스프링에서 트랜잭션 적용 방법
        -> 비즈니스 로직(Service Layer)에서 주로 트랜잭션을 적용한다.
        1. @Transactional 애너테이션 사용
            - 메소드나 클래스 단위에 선언 가능
            - 기본적으로 RuntimeException이 발생하면 rollback 실행
        2. 롤백 범위 지정
            - @Transactional(rollbackFor = Exception.class)
              → 모든 예외 발생 시 롤백
            - @Transactional(noRollbackFor = 특정예외.class)
              → 특정 예외는 롤백하지 않음
        3. 트랜잭션 전파(Propagation) 옵션
            - REQUIRED (기본값): 이미 트랜잭션이 있으면 참여, 없으면 새로 시작
            - REQUIRES_NEW: 항상 새로운 트랜잭션 시작
            - MANDATORY: 반드시 기존 트랜잭션 내에서만 실행
            - SUPPORTS: 트랜잭션이 있으면 참여, 없어도 실행
        4. 격리수준(Isolation Level)
            - READ_UNCOMMITTED, READ_COMMITTED(기본), REPEATABLE_READ, SERIALIZABLE
            - 동시성 문제(Dirty Read, Non-Repeatable Read, Phantom Read) 방지용
