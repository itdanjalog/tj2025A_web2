[ 리덕스 ]
    1. 정의 : 전역 상태 관리 라이브러리 , 서로 다른 컴포넌트 간의 효율적인 상태(값) 공유 한다.
    2. 목적 : 상태들을 저장하는 store(저장소) 만들고 서로 다른 컴포넌트 간의 일관적인 상태 유지한다(전역변수)
    3. 활용처 : 로그인상태(비밀번호X), UI테마 , 로그인유지상태 등등
        1) 전역 상태(값) 필요할때
        2) 여러개의 컴포넌트에서 동일한 변수를 공유할때
        3) 컴포넌트 간 props 전달이 복잡해질 때
        등등
    4. 핵심 용어
        export default 값          : JS파일내 하나의 기본적인 내보내기 값(함수/객체) , *name 없다* 
            import 변수명 from '파일경로'
            예] import userReducer from './userSlice.jsx'
        export const 변수명 = 값   : JS파일내 여러개 내보내기 값(함수/객체) , *name 있다*
            import { 가져올변수명 } from '파일경로'
            예] import { login, logout } from './userSlice.jsx';

        1. Store(저장소) : 상태들을 관리하는 중앙 , 즉] 모든 상태(전역변수) 들을 저장한다. 
            - 애플리케이션 1개당 1개
            - configureStore( )

        2. Slice : 상태(전역변수=값)와 리듀서(함수=상태[값]변경)를 정의하는 곳
            - 액션 통해 상태변경을 하면 *리렌더링* 된다.   
            - createSlice( ) 

        3. Reducer(리듀서) : 상태를 변경하는 함수

        4. action(액션) : 상태를 변경하기 위한 store에 보내는 객체(값) , dispatch 로 전달된다.

    5. 실행 순서 
        1) 컴포넌트에서 dispatch(action객체) 호출
        2) 스토어가 해당 액션을 리듀서에 전달
        3) 리듀서가 새로운 state 반환
        4) 변경된 state로 리렌더링 발생


    6. 상위 컴포넌트에서 <Provider store={ 내가만든스토어 }> 통해 하위 컴포넌트에게 공급한다.
        1) 액션 호출 : dispatch( 상태변경함수( 인자값 ) );
            - dispatch는 action 객체를 store에 전달하는 함수
            - slice 내부 reducer 함수에서 action.payload 로 인자값 접근 가능
            - 예시: login : ( state , action ) => { state.userInfo = action.payload }

        2) 현재 상태 반환 : useSelector( (state) => state.등록된상태명 )
            - store의 특정 slice/state를 가져오는 hook
            - 예시: const user = useSelector(state => state.user.userInfo)


[ 퍼시스트 ]
    1. 정의 : 리덕스의 상태는 기본적으로 메모리 기반이라 새로고침 시 초기화됩니다.
    2. 목표 : 이를 보완하기 위해 redux-persist 라이브러리를 사용하면, localStorage / sessionStorage 등에 자동 저장 & 복원이 가능합니다.
    3. 설치 : npm install redux-persist
    4. 핵심 용어
        1) persistConfig:   Redux Persist의 설정 객체입니다.  어떤 slice를 저장할지, 어디(local/session)에 저장할지 설정하는 객체
        2) PersistGate : Redux Persist에서 제공하는 리액트 컴포넌트입니다. 저장소에서 상태를 불러올 때까지 UI 렌더링을 지연시켜주는 컴포넌트
    5. 특징
        1) localStorage: 새로고침해도 로그인 상태 유지됨
        2) sessionStorage: 브라우저 종료하면 초기화됨
