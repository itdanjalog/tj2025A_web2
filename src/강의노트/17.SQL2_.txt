[ ALTER ]
    - 기존 테이블의 구조 변경
    - 사용법
        추가 : ALTER TABLE 테이블명 ADD COLUMN 새로운필드명 타입;
        타입수정 : ALTER TABLE 테이블명 MODIFY COLUMN 수정할필드명 새로운타입;
        필드명수정 : ALTER TABLE 테이블명 CHANGE COLUMN 기존필드명 새로운필드명 타입;
        삭제 : ALTER TABLE 테이블명 DROP COLUMN 삭제할필드명;
        제약조건추가
            ALTER TABLE 테이블명 ADD CONSTRAINT 제약조건명 PRIMARY KEY(PK필드명);
            ALTER TABLE 테이블명 ADD CONSTRAINT 제약조건명 FOREIGN KEY(FK필드명) REFERENCES 참조테이블명(PK필드명);
            ALTER TABLE 테이블명 ADD CONSTRAINT 제약조건명 제약조건(필드명);
        제약조건삭제
            ALTER TABLE 테이블명 DROP PRIMARY KEY
            ALTER TABLE 테이블명 DROP FOREIGN KEY 삭제할제약조건명;
            ALTER TABLE 테이블명 DORP CONSTRAINT 삭제할제약조건명;
        필드 확인 : SHOW COLUMNS FROM 테이블명;
        제약조건 확인 : SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS;
[ SUBQUERY ]
    - SELECT 안의 SELECT
    - 사용법 : SELECT (SELECT) FROM (SELECT) WHERE (SELECT)


[ TRANSACTION : 트랜잭션 ]
    정의: 여러 SQL 작업을 하나의 단위(묶음)로 처리하여 모두 성공 시 COMMIT, 하나라도 실패 시 ROLLBACK 하는 기능.
    명령어 정리:
        START TRANSACTION;           -- 트랜잭션 시작
        COMMIT;                      -- 성공 시 확정
        ROLLBACK;                    -- 실패 시 취소
        SAVEPOINT point1;             -- 특정 지점 저장
        ROLLBACK TO point1;           -- 해당 지점까지 복원
        SET autocommit = 0;           -- 자동 커밋 해제 (수동 모드)

    주의사항:
        COMMIT 또는 ROLLBACK을 수행하면 트랜잭션이 종료된다.
        트랜잭션은 데이터 무결성과 안정성을 보장하기 위한 핵심 기능이다.
        💡 예시: 은행 계좌 이체처럼 “A 계좌 출금”과 “B 계좌 입금”을 함께 처리해야 하는 경우에 유용하다.

[ VIEW : 가상 테이블 ]
    정의: 실제 데이터를 저장하지 않고, SELECT 쿼리 결과를 이름으로 저장한 가상 테이블.
    기본 명령어:
        CREATE [OR REPLACE] VIEW 뷰명 AS SELECT문;   -- 뷰 생성
        SELECT * FROM 뷰명;                         -- 뷰 조회
        ALTER VIEW 뷰명 AS SELECT문;                -- 뷰 수정
        DROP VIEW IF EXISTS 뷰명;                   -- 뷰 삭제
        SHOW FULL TABLES WHERE TABLE_TYPE='VIEW';   -- 뷰 목록 확인
    장점:
        SQL 문 간결화 및 재사용 가능
        보안 강화 (민감한 컬럼 숨김 가능)
        복잡한 쿼리의 결과를 재활용 가능
    단점:
        복잡한 뷰(집계, 조인 등)는 성능 저하 가능
        일부 뷰는 수정 불가능 (읽기 전용)
    수정 가능한 뷰: 단일 테이블 기반, 집계/함수/조인 없는 경우만 가능
    읽기 전용 뷰: JOIN, GROUP BY, 집계 함수 포함 시 자동으로 읽기 전용
    💡 TIP: VIEW는 실무에서 권한 분리 및 공용 쿼리 재사용에 자주 활용된다.


[ DCL ]
    정의:
        데이터베이스의 사용자 계정 생성, 권한 부여, 권한 회수 등을 관리하는 명령어.
    주요 명령어
명령어
CREATE USER '계정명'@'허용도메인' IDENTIFIED BY '비밀번호';	새로운 사용자 계정 생성	'localhost'는 내부 접속 전용, '%'는 모든 외부 IP 허용 (보안상 주의)
GRANT ALL PRIVILEGES ON 데이터베이스명.테이블명 TO '계정명'@'도메인';	특정 사용자에게 모든 권한 부여	SELECT, INSERT, UPDATE 등 일부 권한만 선택적으로 부여 가능
REVOKE 권한명 ON 데이터베이스명.테이블명 FROM '계정명'@'도메인';	부여된 권한 회수	권한 회수 후 FLUSH PRIVILEGES; 실행 시 즉시 반영
ALTER USER '계정명'@'도메인' IDENTIFIED BY '새로운비밀번호';	기존 계정의 비밀번호 변경	비밀번호 정책 또는 보안 규정 변경 시 자주 사용
DROP USER '계정명'@'도메인';	사용자 계정 삭제	해당 계정의 모든 권한과 연결 정보가 함께 제거됨
SHOW GRANTS FOR '계정명'@'도메인';	특정 계정의 현재 권한 목록 확인	권한 설정 후 확인하거나 접근 불가 시 점검용으로 자주 사용
    DCL은 데이터 자체보다 “누가, 어떤 범위로 DB에 접근할 수 있는가”를 제어하는 명령이다.


[ INDEX ]
    정의:
        테이블의 특정 컬럼을 기준으로 데이터를 빠르게 검색하기 위한 색인 구조(B-Tree 기반)
        → 도서관의 책 “색인표(Index)”와 같은 개념.

    사용목적
        SELECT, JOIN, ORDER BY 등의 검색 속도 향상
        데이터 중복 방지를 위한 UNIQUE 인덱스
        대용량 데이터 조회 시 성능 최적화
        단, INSERT/UPDATE/DELETE 시에는 인덱스 갱신으로 약간의 성능 저하 발생

SHOW INDEX FROM 테이블명;	                                    테이블에 설정된 인덱스 목록 확인	인덱스명, 컬럼, 고유성(UNIQUE 여부) 등 확인 가능
CREATE INDEX 인덱스명 ON 테이블명(필드명);	                    단일(1개 컬럼) 인덱스 생성	자주 검색되는 컬럼에 적용
DROP INDEX 인덱스명 ON 테이블명;	                            인덱스 삭제	불필요한 인덱스 정리
CREATE INDEX 인덱스명 ON 테이블명(필드명1, 필드명2);	            복합(2개 이상 컬럼) 인덱스 생성	WHERE 절에서 여러 컬럼을 함께 검색할 때 유용
CREATE FULLTEXT INDEX 인덱스명 ON 테이블명(필드명1);	        자연어 검색용 인덱스 (FullText)	TEXT, CHAR, VARCHAR 타입에서 사용 가능
SELECT * FROM 테이블명 WHERE MATCH(필드명1) AGAINST('검색어');	FULLTEXT 인덱스를 이용한 검색	긴 문자열에서 빠른 검색 가능
EXPLAIN ANALYZE 쿼리문;	                                    쿼리 실행 계획 분석 (인덱스 사용 여부 확인)	“type” 또는 “key” 컬럼으로 인덱스 활용 여부 확인










