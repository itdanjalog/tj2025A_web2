[ AXIOS ] : 비동기 통신
    - 대표적인 비동기/동기 통신 함수 : fetch(JS내장함수) vs axios(node기반함수) vs ajax(Jquery)
    - 특징 : *JSON 타입으로 자동 변환*
    1. 설치 (각 환경 다르다)
        - JS(CDN) : <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        - react(npm) : npm i axios
    2. 문법
        axios.HTTP메소드명( '통신할HTTP주소' , {body} , {option} )
            1. HTTP메소드명 : axios.post() , axios.get() , axios.put() , axios.delete()
            2. 통신할HTTP주소 :
                1.[내부서버] 스프링환경에서는 RestController 에서 정의한 매핑 주소
                    @GetMapping("/day04/student")  ----> '/day04/student'
                2.[외부서버] https:// ~~~

            3. body : 보낼 자료/데이터 객체{}
                * post , put  method 가 데이터 보낼때. body 사용   * get , delete : body 사용하지 않는다.

            4. option : HTTP header 설정
                * 기본값은 content-type : 'application/json'
                1. { headers : { Content-Type : 'application/json'} }      * 기본값
                2. { headers : { Content-Type : 'multipart/form-data'} }   * FORM 첨부파일 전송

    3. 관례적인 유형들 : 여러개 통신을 순차처리 할 경우에는 주로 동기화 , 여러개 통신을 동시처리 할 경우에는 주로 비동기화
        1. 비동기 유형1
        ( ) = > {
            axios.post( '' , {} , {} )
                .then( response => { console.log( response.data) } )
                .catch( e => { console.log( e ); }
        }

        2. 동기 유형2 , .then / .catch
        async ( ) => {
            await axios.post( '' , {} , {} )
                .then( response => { console.log( response.data)} )
                .catch( e => { console.log( e ); }
        }

        3. 동기 유형3
        async ( ) => {
            try{
                const response = await axios.post( '' , {} , {} )
                console.log( response.data );
            }catch( e ){ console.log(e);}
        }

    4. CORS policy ( Cross Origin Resource Sharing 정책 )
        1. 정의 : 브라우저에서 다른 도메인(HTTP주소)의 리소스(자료)를 요청할 때 발생하는 보안 정책
        2. 목적 : 2009년 표준화된 보안 정책 SOP( Same-origin-policy ) , 동일한 도메인 끼리 리소스를 허용한다.
        3. 방법
                [문제점]
                - JS( localhost:8080 ) --------> spring( localhost:8080 ) : 도메인 같으므로 문제 없다.
                - react( localhost:5173 ) ------> spring( localhost:8080) : 서도 다른 도메인 이므로 문제 있다.
                [해결방안] : 서로 다른 도메인 간의 리소스 공유 허용 , CORS 허용
                    (1) 스프링 서버 허용 방법
                        Controller클래스 위에 @CrossOrigin("허용할도메인주소")
                            ->@CrossOrigin("http://localhost:5173") : 해당 클래스는 리액트 서버를 (통신) 허용한다.
    * 도메인 이란 ?
        http://192.168.40.25:8080   : ip:port 주소(숫자)
        http://www.naver.com        : ip:port 주소(숫자 --> 문자 ) DNS(도메인 네임 서비스)
            -> 우편번호(숫자) ---> 도로명 주소(문자)


[ CORS ] : Cross-Origin Resource Sharing
    1. 정의 : 서로 다른 도메인(HTTP주소:http://ip/port) 의 요청과 응답 허용하는 정책 
    2. 목적 : 기본적으로 브라우저는 보안상의 이유로 CORS 차단한다. , 쿠키(세션)/인증 공유 불가능. Credentials = false
        -> SOP( Same-Origin Policy ) : 동일한 도메인끼리만 통신하자
    3. 적용사례
        1.개발단계
            1. 리액트 : localhost:5173~
            2. 스프링 : localhost:8080~
        2. 배포(운영) 단계 
            방법1. 서버 2개를 그대로 운영한다.
            방법2. 리액트를 결과들을 정적파일들을 스프링에서 (통합) 관리하여 운영

    3. 서로 다른 도메인 간 CORS 허용 방법 
        (스프링 방법1 : 스프링 설정 클래스 생성 )
            @Configuration // 빈 등록 // 스프링 시작될때 해당 클래스를 읽어드린다.
            public class CorsConfig implements WebMvcConfigurer {
                // (1) implements WebMvcConfigurer : spring mvc 관련 설정값을 수정하는 인터페이스
                // (2) CORS 관련 설정값 수정 , 오버라이딩(재정의) , addCorsMappings 메소드
                @Override
                public void addCorsMappings(CorsRegistry registry) {
                    registry.addMapping("/**") // 모든 스프링 컨트롤러의 HTTP주소 매핑 허용
                            .allowedOrigins("http://localhost:5173" , "http://localhost:5174") // 허용할 출처(도메인)
                            .allowedMethods("GET" ,"POST" , "PUT" , "DELETE") // 허용할 HTTP 메소드들
                            .allowedHeaders("*") // HTTP 의 헤더(body)정보 허용
                            .allowCredentials(true); // HTTP 의 쿠키(세션)/인증 허용 // 마지막에 ;(세미콜론) 마침
                }
            }
    4. 리액트에서 서로 다른 서버(도메인:8080) 에게 요청 보내기
        1. axios, fetch 주의할점 : 쿠키(세션) 유지 안된다.
        2. 해결방안 : 쿠키(세션)/인증 를 사용하는 REST API 대해서 Credentials = true 허용한다.
            - axios.XXX('' , { withCredentials : true } )

====================================================================================================================
📝 React Axios & CORS 정리
1️⃣ Axios (비동기 통신 라이브러리)
✅ 정의

비동기 HTTP 통신을 쉽게 할 수 있는 라이브러리

JSON 데이터를 자동으로 변환해주며, fetch보다 사용이 간단

대체재:

fetch (브라우저 내장)

ajax (과거 jQuery 기반)

✅ 설치

CDN (Vanilla JS)

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>


React (npm)

npm install axios

✅ 기본 문법
axios.메소드("요청주소", { body }, { option })


메소드 종류:

axios.get()

axios.post()

axios.put()

axios.delete()

요청 주소

내부 서버: Spring REST API 주소

@GetMapping("/day04/student") // React에서 '/day04/student' 로 호출


외부 서버: https://api.example.com/...

body: 데이터 전송 (주로 POST, PUT에 사용)

GET, DELETE는 body 없음

option (HTTP Header)

JSON 전송(기본):

{ headers: { "Content-Type": "application/json" } }


파일 전송(FormData):

{ headers: { "Content-Type": "multipart/form-data" } }

✅ Axios 사용 패턴
(1) 비동기 then/catch 방식
axios.post("/api", {id:1})
  .then(res => console.log(res.data))
  .catch(err => console.error(err));

(2) async/await + then/catch
async function sendData() {
  await axios.post("/api", {id:1})
    .then(res => console.log(res.data))
    .catch(err => console.error(err));
}

(3) async/await + try/catch (가장 많이 사용)
async function sendData() {
  try {
    const res = await axios.post("/api", {id:1});
    console.log(res.data);
  } catch (err) {
    console.error(err);
  }
}

2️⃣ CORS (Cross-Origin Resource Sharing)
✅ 정의

서로 다른 도메인 간의 요청/응답을 허용하는 정책

브라우저 보안 정책인 SOP (Same-Origin Policy) 때문에 기본적으로 차단됨

👉 동일 출처(Same-Origin) 기준

같아야 하는 것: 프로토콜 + 도메인 + 포트

예:

✅ http://localhost:8080 → http://localhost:8080 (가능)

❌ http://localhost:5173 → http://localhost:8080 (CORS 문제 발생)

✅ 개발 vs 운영

개발 단계

React: http://localhost:5173

Spring: http://localhost:8080

서로 다른 도메인 → CORS 문제 발생

배포 단계

방법1. React 서버와 Spring 서버를 각각 운영 → CORS 설정 필요

방법2. React 빌드 결과(정적 파일)를 Spring에 통합 → 같은 도메인으로 운영 → CORS 문제 없음

✅ Spring에서 CORS 해결 방법
1. 컨트롤러 단위 허용
@CrossOrigin("http://localhost:5173")
@RestController
public class StudentController { ... }

2. 전역 설정 (추천)
@Configuration
public class CorsConfig implements WebMvcConfigurer {
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**") // 모든 컨트롤러 허용
                .allowedOrigins("http://localhost:5173", "http://localhost:5174") // 허용할 도메인
                .allowedMethods("GET","POST","PUT","DELETE") // 허용할 메소드
                .allowedHeaders("*") // 모든 헤더 허용
                .allowCredentials(true); // 쿠키/세션 허용
    }
}

✅ React에서 인증 포함 요청

axios 기본값: withCredentials: false → 쿠키/세션 전달 안 됨

인증이 필요한 경우:

axios.post("http://localhost:8080/login", {id:"test", pw:"1234"}, { withCredentials: true })

🎯 핵심 요약

Axios

React에서 가장 많이 쓰는 HTTP 통신 라이브러리

JSON 자동 변환, async/await와 잘 어울림

CORS

브라우저 보안 정책 때문에 서로 다른 도메인 요청은 기본 차단

해결: Spring 서버에서 CORS 허용 설정

쿠키/세션 인증이 필요하면 withCredentials: true 필수

