* 리액트에서는 훅 핵심이다.

DOM : document object model
    -> HTML 문서의 구조를 표현하는 객체 
        -> Element : HTML 마크업들 : <div> <input> <p> 등등
        -> Text : HTML 마크업 내 내용 : <div> TEXT </div>
        -> Attribute : HTML 마크업의 속성 : class, id , name , href , src 등등

Virtual DOM : 가상의 DOM
    -> 실제 DOM을 직접 수정하지 않고 가상DOM 생성하여 실제 DOM과 비교하여 필요한 부분한 업데이트/수정 
        -> Element : 컴포넌트
        -> Text 
        -> Attribute : props 
    즉] *HTML 마크업 만들기* : <div> : HTML 회사 만들어서 제공 , <card> : 리액트에서 컴포넌트 만들수 있다.
    장점 : 부분적 렌더링에 따른 빠르고 효율적인 최적화 렌더링 할수 있다. 

[ 생명주기 ] : 컴포넌트 생명주기 
    1. 컴포넌트가 생성되는 시점부터 사라지는 시점까지의 주기 
    2. 시점 
        1. 마운트(출생) : mount
            -> render()  : main.jsx 존재하는 컴포넌트 그려주는 함수.
                -> 상위컴포넌트 return 할때 하위 컴포넌트 같이 return 되므로 하위컴포넌트들도 출생한다.

            -> 컴포넌트가 출생할때 1번 실행되는 함수 : useEffect( () => {} , [] )

        2. 업데이트(인생) : update 
            -> setState() , props 변경 , redux
                -> 컴포넌트가 리렌더링 된다 , 리렌더링 == 화면새로고침 == 컴포넌트재호출 == 함수재호출 

            -> 컴포넌트가 업데이트 될때 마다 실행되는 함수 : useEffect( () => {} , [ 의존성 ] )
                -> 의존성 : 누가 업데이트 되었을때 실행할지 state 변수명 넣어주면 된다.

        3. 언마운트(사망) : unmount
            -> 사용자가 보는 화면에서 사라질때 실행 , *자동*
            -> 컴포넌트가 제거/사망 될때 실행되는 함수 : useEffect( () => { return () => {} } , [] )
            
                -> return 에 컴포넌트가 제거될때 실행할 함수코드를 넣어준다.
        
[ 훅 ] : hook
    1. 정의 : 리액트의 컴포넌트 상태(state) 와 생명주기 기능에 갈고리를 걸어 원하는 시점에 정해진 함수를 실행하도록 만든 라이브러리
    2. 함수 종류 
        1. (*) useState 

        2. useEffect
====================================================================================
📝 React 핵심 정리
1️⃣ DOM과 Virtual DOM
✅ DOM (Document Object Model)

HTML 문서를 객체 트리 구조로 표현한 것

구성 요소:

Element: HTML 태그 (<div>, <input>, <p> …)

Text: 태그 안에 들어가는 내용 (<div>여기 글자</div>)

Attribute: 태그 속성 (class, id, name, href, src 등)

✅ Virtual DOM (가상 DOM)

React가 사용하는 DOM의 복제본(가상 모델)

특징:

실제 DOM을 직접 수정하지 않고, Virtual DOM을 먼저 수정

Virtual DOM과 실제 DOM을 비교(Diffing) 후, 바뀐 부분만 실제 DOM에 반영 (부분 렌더링)

구성 대응:

Element → React 컴포넌트

Text → 컴포넌트 내부 텍스트

Attribute → props

장점: 전체를 새로 그리지 않고 최소한의 업데이트만 실행 → 성능 최적화

👉 예시

HTML에서는 <div>를 직접 만들어야 함

React에서는 <Card> 같은 사용자 정의 컴포넌트 태그도 가능

====================================================================================

2️⃣ 컴포넌트 생명주기 (Lifecycle)

컴포넌트는 출생 → 인생(업데이트) → 사망의 주기를 가짐

1. 마운트(Mount, 출생)

컴포넌트가 처음 화면에 나타나는 시점

실행 예시: main.jsx에서 render() 호출 시

React Hook:

useEffect(() => {
  console.log("컴포넌트 출생 시 1회 실행");
}, []);

2. 업데이트(Update, 인생)

state 변경 (setState) / props 변경 / Redux store 업데이트 시 발생

컴포넌트가 리렌더링됨 → 함수가 다시 호출됨

React Hook:

useEffect(() => {
  console.log("특정 값이 업데이트될 때 실행");
}, [의존성]);

3. 언마운트(Unmount, 사망)

컴포넌트가 화면에서 사라지는 시점

React Hook:

useEffect(() => {
  return () => {
    console.log("컴포넌트 사망 시 실행");
  };
}, []);

====================================================================================

3️⃣ 훅 (Hook)
✅ 정의

React 함수형 컴포넌트에서 **상태(state)**와 생명주기(lifecycle) 기능을 사용할 수 있도록 만든 특별한 함수

“갈고리(hook)”처럼 특정 시점에 원하는 동작을 걸어줄 수 있음

✅ 주요 Hook

useState

컴포넌트의 상태값(state)을 만들고 관리하는 훅

const [state, setState] = useState(초기값)

useEffect

컴포넌트 생명주기 관련 동작을 다루는 훅

마운트, 업데이트, 언마운트 시 특정 코드를 실행 가능